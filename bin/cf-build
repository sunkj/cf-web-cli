#!/usr/bin/env node

var program = require('commander')
var path = require('path');
var co = require('co');
var chalk = require('chalk');
var ora = require('ora');
var logger = require('../lib/logger');
const spawn = require('child_process').spawn;

/**
 * Usage.
 */
program
  .usage('-m [prod]')
  .option('-m, --mode [mode]', '编译项目')
  .option('-c, --cwd [cwd]', '运行目录')
  .description(chalk.gray('编译项目，支持测试版本<test>, 生产版本<prod>, 验证编译结果<verify>'))

/**
 * Help.
 */
program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log('    $ cf build -m test OR cf build test')
  console.log('    $ cf build -m prod OR cf build prod')
  console.log('    $ cf build -m verify OR cf build verify')
  console.log('    $ cf build -mode test')
  console.log('    $ cf build -mode prod')
  console.log('    $ cf build -mode verify')
  console.log()
})


program.parse(process.argv)

/**
 * 如果没有提供任何参数，显示帮助信息
 */
if (!program.mode && !program.args[0]) {
  return program.help();
}


/**
 * 开始执行
 */
run();

/**
 * @description 开始执行
 */
function run () {
  try{
    var commandArgs = ['run'];
    var mode = program.args[0] ? program.args[0] : program.mode;
    if(mode && mode.toUpperCase() == 'TEST') {
      commandArgs.push('build:test');
    }else if(mode && mode.toUpperCase() == 'PROD') {
      commandArgs.push('build:prod');
    }else if(mode && mode.toUpperCase() == 'VERIFY') {
      commandArgs.push('build:server');
    }else{
      program.help();
      return;
    }
    var cwd = process.cwd();
    // 指定相对目录路径
    if(program.cwd && !path.isAbsolute(program.cwd)){
      cwd = path.join(process.cwd(), program.cwd);
    }
    // 指定了绝对路径
    if(program.cwd && path.isAbsolute(program.cwd)){
      cwd = program.cwd;
    }
    // 开始运行命令
    logger.log('开始构建项目, 模式：' + mode);
    var spinner = ora(logger.log('开始运行命令...'));
    spinner.start();
    const ls = spawn((process.platform === "win32" ||  process.platform === "win64") ? "npm.cmd" : "npm", commandArgs, {"cwd": cwd});
    ls.stdout.on('data', (data) => {
        console.log(`${data}`);
    });
    ls.stderr.on('data', (data) => {
        console.log(`${data}`);
    });
    ls.on('error', (err) => {
      spinner.stop();
      console.log('启动子进程失败,', err);
    });
    ls.on('close', (code) => {
      spinner.stop();
    });
  }catch (e){
    console.log(e);
    logger.error('构建失败:' + e);
  }
}


/**
 * 监听退出
 */
process.on('exit', function () {
  console.log()
})
