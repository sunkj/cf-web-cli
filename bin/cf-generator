#!/usr/bin/env node

var program = require('commander')
var path = require('path');
var co = require('co');
var chalk = require('chalk');
var ora = require('ora');
var logger = require('../lib/logger');
var child_process = require('child_process');
var util = require('../lib/util');
var createPipeAction = require('../lib/create-pipe-action');
var createRouteAction = require('../lib/create-route-action');
var createServiceAction = require('../lib/create-service-action');
var createComponentAction = require('../lib/create-component-action');
var createModuleAction = require('../lib/create-module-action');
var createDireactiveAction = require('../lib/create-direactive-action');
var fs = require('fs');

/**
 * Usage.
 */
program
  .option('-c, --component <component>', '创建组件')
  .option('-m, --module <module>', '创建模块')
  .option('-s, --service <service>', '创建服务')
  .option('-d, --directive <directive>', '创建指令')
  .option('-r, --route <route>', '创建路由')
  .option('-p, --pipe <pipe>', '创建管道')
  .description(chalk.gray('创建模板命令，支持创建组件、模块、服务、指令、管道、路由等'))

/**
 * Help.
 */
program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log('    $ cf generator -c your-component or cf generator -c your-component output')
  console.log('    $ cf generator -m your-module or cf generator -m your-module output')
  console.log('    $ cf generator -r your-route')
  console.log('    $ cf generator -s your-service or cf generator -s your-service output')
  console.log('    $ cf generator -d your-direactive')
  console.log('    $ cf generator -p your-pipe')  
  console.log()
})


program.parse(process.argv)

/**
 * 如果没有提供任何参数，显示帮助信息
 */
if (!program.component
	&& !program.module
	&& !program.service
	&& !program.directive
	&& !program.pipe
  && !program.route) {
  return program.help();
}


/**
 * 开始执行
 */
run();

/**
 * @description 开始执行
 */
function run () {
  try{
    // 创建Pipe
    program.pipe && createPipe(program.pipe, program.pipe);
    // 创建module
    program.module && createModule(program.module);
    // 创建component
    program.component && createComponent(program.component);
    // 创建service
    program.service && createService(program.service);
    // 创建directive
    program.directive && createDireactive(program.directive, program.directive);
    // 创建route
    program.route && createRoute(program.route);
  }catch(e){
      console.log(e);
      logger.error('创建模板失败:' + e);
  }
}

/**
 * @description 创建Pipe
 * @param name 名称
 * @param output 输出路径
 */
function createPipe(name, selector){
  let defaultPath = path.join(process.cwd(), 'src', 'app', 'shared', 'pipe');
  if(!fs.existsSync(defaultPath)){
    defaultPath = path.join(process.cwd());
  }
  createPipeAction.exec(name, selector, defaultPath);
}

/**
 * @description 创建Direactive
 * @param name 名称
 * @param output 输出路径
 */
function createDireactive(name, selector){
  let defaultPath = path.join(process.cwd(), 'src', 'app', 'shared', 'directive');
  if(!fs.existsSync(defaultPath)){
    defaultPath = path.join(process.cwd());
  }
  createDireactiveAction.exec(name, selector, defaultPath);
}

/**
 * @description 创建Component
 * @param name 名称
 * @param output 输出路径
 */
function createComponent(name){
  let output = program.args[0]
      ? path.join(process.cwd(), program.args[0], name.toLowerCase()) : path.join(process.cwd(), 'src', 'app', name.toLowerCase());
  checkExistOrMakeFolder(output);
  createComponentAction.exec(name, output);
}

/**
 * @description 创建Module
 * @param name 名称
 * @param output 输出路径
 */
function createModule(name){
  let output = program.args[0]
      ? path.join(process.cwd(), program.args[0], name.toLowerCase()) : path.join(process.cwd(), 'src', 'app', name.toLowerCase());
  checkExistOrMakeFolder(output);
  createModuleAction.exec(name, output);
}

/**
 * @description 创建Service
 * @param name 名称
 * @param output 输出路径
 */
function createService(name){
  let output = program.args[0]
      ? path.join(process.cwd(), program.args[0]) : path.join(process.cwd(), 'src', 'app', 'shared', 'service');
  checkExistOrMakeFolder(output);
  createServiceAction.exec(name, output);
}

/**
 * @description 创建Route
 * @param name 名称
 * @param output 输出路径
 */
function createRoute(name){
  let output = program.args[0]
      ? path.join(process.cwd(), program.args[0]) : path.join(process.cwd());
  createRouteAction.exec(name, output);
}

/**
 * @description 检查文件夹是否存在，不存在就创建一个
 * @param folder 文件夹路径
 */
function checkExistOrMakeFolder(folder){
  if(!fs.existsSync(folder)){
    fs.mkdirSync(folder);
  }
}

/**
 * 监听退出
 */
process.on('exit', function () {
  console.log()
})
