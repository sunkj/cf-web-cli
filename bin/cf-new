#!/usr/bin/env node

var program = require('commander')
var path = require('path');
var co = require('co');
var chalk = require('chalk');
var logger = require('../lib/logger');
var downloadAction = require('../lib/download-action');
var generateAction = require('../lib/generate-action');
var installAction = require('../lib/install-action');

/**
 * Usage.
 */
program
  .usage('<template-name> [project-name]')
  .description(chalk.gray('根据github模板，创建一个新项目，支持项目模板 ng1, ng2, react, vue'))

/**
 * Help.
 */
program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log('    $ cf new ng2   project-name')
  console.log('    $ cf new vue   project-name')
  console.log('    $ cf new react project-name')
  console.log()
})


program.parse(process.argv)

/**
 * 如果没有提供任何参数，显示帮助信息
 */
if (program.args.length < 2) {
  return program.help();
}

/** 执行参数定义 */
let params = {
  template: program.args[0],
  projectName: program.args[1],
  tempPath: path.join(process.cwd(), '.' + program.args[0])
};


/**
 * 开始执行
 */
run();

/**
 * @description 开始执行
 */
function run () {
  co(function*(){
    // 开始
    logger.log(`开始创建项目，项目名称：${params.projectName}`);
    // 下载文件路径
    let downloadPath = params.tempPath;
    if(!path.isAbsolute(downloadPath)){
      downloadPath = path.join(process.cwd(), params.tempPath);
    } 
    // 开始下载
    yield downloadAction.exec(params.template, downloadPath);
    // 生成项目路径
    var projectPath = path.join(process.cwd(), params.projectName);
    // 生成项目
    generateAction.exec(params.projectName, downloadPath, projectPath);
    // 运行 npm install
    yield installAction.exec(projectPath);  
    // 完成
    logger.success(`创建项目完成，项目名称：${params.projectName}`); 
  }).catch(
    e => {
      console.log(e);
      logger.error('创建失败:' + e);
    }
  )
}


/**
 * 监听退出
 */
process.on('exit', function () {
  console.log()
})
