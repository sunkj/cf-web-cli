#!/usr/bin/env node

var program = require('commander')
var path = require('path');
var co = require('co');
var chalk = require('chalk');
var ora = require('ora');
var logger = require('../lib/logger');
var child_process = require('child_process');

/**
 * Usage.
 */
program
  .usage('-m [dev]')
  .option('-m, --mode [mode]', '开始运行项目')
  .description(chalk.gray('运行项目，支持开发模式[dev], Mock测试模式[mock], 默认为Mock模式。'))

/**
 * Help.
 */
program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log('    $ cf run -m dev')
  console.log('    $ cf run -m mock')
  console.log('    $ cf run -mode dev')
  console.log('    $ cf run -mode mock')
  console.log()
})


program.parse(process.argv)

/**
 * 如果没有提供任何参数，显示帮助信息
 */
if (!program.mode) {
  return program.help();
}


/**
 * 开始执行
 */
run();

/**
 * @description 开始执行
 */
function run () {
  var command = '';
  var mode = program.mode ? program.mode : program.args[0];
  if(mode && mode.toUpperCase() == 'DEV'){
    command = 'npm start';
  }else if(mode && mode.toUpperCase() == 'MOCK'){
    command = 'npm run mock';
  }else{
    command = 'npm run mock';
  }
  var cwd = process.cwd();
  // 开始运行命令
  logger.log('运行模式: ' + mode || 'mock');
  var spinner = ora(logger.log(command));
  spinner.start();
  child_process.exec(command, {"cwd": cwd}, function(err){
    spinner.stop();
    if(err){
      console.log(err);
      logger.error('项目启动失败！');
    }else{
      logger.success('项目启动成功！');
    }
  });
}


/**
 * 监听退出
 */
process.on('exit', function () {
  console.log()
})
